import java.util.*;import java.io.*;public class ExamineManager implements ExamineManagerInterface {	private ArrayList<Student> students = null;	private ArrayList<Subject> subjects = null;	public ExamineManager() {		students = new ArrayList<Student>();		subjects = new ArrayList<Subject>();	}	public void importStudentData(String filename) {		FileReader in = null;		BufferedReader read = null;		try {			in = new FileReader(filename);			read = new BufferedReader(inFile);			String id;			while ( (id = read.readLine()) != null)			{			Student sinhVien= new Student(); 			sinhVien.setStudentID(id);			sinhVien.setName(read.readLine());			sinhVien.setBirthday(read.readLine());			this.students.add(sinhVien);			read.readLine();			}			read.close();		} catch (Exception e) {		System.out.println("xay ra loi " + e.getMessage());			}	}	public void importGradeData(String filename) {		FileReader in = null;		BufferedReader read = null;		try {			in = new FileReader(filename);			read = new BufferedReader(inFile);			String id;			while ( (id = read.readLine()) != null)			{		  	Subject sinhVien= new Subject(); 			sinhVien.setStudentID(id);			sinhVien.setSubjectName(read.readLine());			sinhVien.setGrade(Double.parseDouble(read.readLine()));			this.subjects.add(sinhVien);			read.readLine();			}			read.close();		} catch (Exception e) {		System.out.println("xay ra loi " + e.getMessage());		}	}	public void computeAverageGrades() {		int a,b;		for(a=0;a<students.size();a++){			int i=0;			double tong = 0;			for(b=0;b<subjects.size();b++){				if(students.get(a).getStudentID().equals(subjects.get(b).getStudentID())){					tong+=subjects.get(b).getGrade();						i++;				}			}			double x = tong/i;			students.get(a).setAverageGrade(x);		}	}	public void sortStudentsbyGrades() {		Collections.sort(students);			Collections.reverse(students);	}	public char classifyGrade(double grade) {		if(grade >= 9.0)			return 'A';		else if(grade >=7.0)			return 'B';		else if(grade >=5.0)			return 'C';		return 'D';	}	public void writeResults2File(String filename) {		try {            File file = new File(filename);            if (!file.exists()) {                file.createNewFile();            }            FileWriter fw = new FileWriter(file.getAbsoluteFile());            BufferedWriter bw = new BufferedWriter(fw);            for(Student x: students){			System.out.println(x);			String content = x.toString();			String content2= "\n"+classifyGrade(x.getAverageGrade())+"\n\n";			bw.write(content);			bw.write(content2);			}            bw.close();        } catch (IOException e) {            e.printStackTrace();        }	}	public void show() {		for(Student x: students)			System.out.println(x); 		for(Subject x: subjects)			System.out.println(x);	}}